# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: windows-latest
    env:
      DEFAULT_MINOR: "21.2.0"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Info!!!!
        run: |
          dir env:
          echo "------------------------"
          echo "Labeled ${{ github.ref }}"

      - name: Get branch or tag   
        id: branch-or-tag
        run: |
          $eventName=$env:GITHUB_EVENT_NAME
          $ref=$env:GITHUB_BASE_REF
          if ($eventName -eq "pull_request") {
              $branchName=$ref #29.8
          } elseif ($ref.StartsWith('refs/heads/')) {
              $branchName=$ref -replace 'refs/heads/',"" #29.8
          } elseif ($ref.StartsWith('refs/tags/')) {
              $tag=$ref -replace 'refs/tags/',"" #29.8.7
          }
          if ($branchName -eq "dev") {
              $tag=$DEFAULT_MINOR
          } elseif ($branchName){
              if(-Not ($branchName -match "\d+\.\d+")) {
                  Write-Host "Wrong branch format $branchName"
                  exit 1
              }
              echo "::set-output name=branch::$branchName"
          } elseif ($tag) {
              echo "::set-output name=tag::$tag"
          }
          echo "branchName=$branchName; tag=$tag"

      - uses: oprypin/find-latest-tag@v1
        id: latest_tag
        with:
          repository: ${{ github.repository }}
          prefix: ${{ steps.branch-or-tag.outputs.branch }}
          releases-only: false
        if: ${{ steps.branch-or-tag.outputs.tag == '' }}
      - run: |
          echo "${{ github.repository }} is at version ${{ steps.latest_tag.outputs.tag }}. ${{ steps.branch-or-tag.outputs.branch }}"


      - name: Calculate version
        id: calculate-version
        run: |
          $patch=0;

          if ("${{ steps.branch-or-tag.outputs.tag }}") {
            $tag="${{ steps.branch-or-tag.outputs.tag }}"
          } else {
            $tag="${{ steps.latest_tag.outputs.tag }}"
          }

          $minor="$tag.0"
          $minorPatch="$tag.$patch"

          echo "::set-output name=minor::$minor"
          echo "::set-output name=branch::$branchName"
          echo "::set-output name=minorPatch::$minorPatch"
          echo "::set-output name=short::$shortVersion"
          echo "Minor is $minor and patch is $minorPatch. Short is $shortVersion"

      # # Just add this  => 
      # - name: Inject slug/short variables
      #   uses: rlespinasse/github-slug-action@v3.x

      # # And you get this  => 
      # - name: Print slug/short variables
      #   run: |
      #     echo "Slug variables"
      #     echo " - ${{ env.GITHUB_REF_SLUG }}"    
      #     echo " - ${{ env.GITHUB_HEAD_REF_SLUG }}"
      #     echo " - ${{ env.GITHUB_BASE_REF_SLUG }}"
      #     echo " - ${{ env.GITHUB_REPOSITORY_SLUG }}"
      #     echo "Slug URL variables"
      #     echo " - ${{ env.GITHUB_REF_SLUG_URL }}"
      #     echo " - ${{ env.GITHUB_HEAD_REF_SLUG_URL }}"
      #     echo " - ${{ env.GITHUB_BASE_REF_SLUG_URL }}"
      #     echo " - ${{ env.GITHUB_REPOSITORY_SLUG_URL }}"
      #     echo "Short SHA variables"
      #     echo " - ${{ env.GITHUB_SHA_SHORT }}"

      # - name: Get branch or tag   
      #   id: branch-or-tag
      #   run: |
      #     $eventName=$env:GITHUB_EVENT_NAME
      #     $ref=$env:GITHUB_BASE_REF
      #     if ($eventName -eq "pull_request") {
      #         $branchName=$ref #29.8
      #     } elseif ($ref.StartsWith('refs/heads/')) {
      #         $branchName=$ref -replace 'refs/heads/',"" #29.8
      #     } elseif ($ref.StartsWith('refs/tags/')) {
      #         $tag=$ref -replace 'refs/tags/',"" #29.8.7
      #     }
      #     if ($branchName -eq "dev") {
      #         $tag=$DEFAULT_MINOR
      #     } elseif ($branchName){
      #         if(-Not ($branchName -match "\d+\.\d+")) {
      #             Write-Host "Wrong branch format $branchName"
      #             exit 1
      #         }
      #         echo "::set-output name=branch::$branchName"
      #     } elseif ($tag) {
      #         echo "::set-output name=tag::$tag"
      #     }


      

      # - uses: oprypin/find-latest-tag@v1
      #   id: latest_tag
      #   with:
      #     repository: ${{ github.repository }}
      #     prefix: ${{ steps.calculate-version.branch }}
      #     releases-only: false
      #   if: steps.calculate-version.branch != 'dev'
      # - run: |
      #     echo "${{ github.repository }} is at version ${{ steps.latest_tag.outputs.tag }}"

      
